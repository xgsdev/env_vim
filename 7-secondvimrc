" **************************
" development configurations 
" **************************

" new general "{{{
set colorcolumn=85

colorscheme molokai

"set number
"relative numbers -set rnu
set relativenumber

" list listchars
set list

" Display unprintable chars
"set listchars=tab:▸\ ,eol:¬
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
"set listchars=tab:»· 
"set listchars+=extends:#
"set listchars+=nbsp:.
set listchars=eol:¬
set listchars+=trail:· 
set listchars+=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣


"}}}

" Fugitive"{{{
nnoremap <Leader>gb :Gblame<cr>
nnoremap <Leader>gc :Gcommit<cr>
nnoremap <Leader>gd :Gdiff<cr>
nnoremap <Leader>gp :Git push<cr>
nnoremap <Leader>gr :Gremove<cr>
nnoremap <Leader>gs :Gstatus<cr>
nnoremap <Leader>gw :Gwrite<cr>
" Quickly stage, commit, and push the current file. Useful for editing .vimrc
nnoremap <Leader>gg :Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr>
"}}}

" Additional Plugin"{{{

" Turn rainbow parenthesis script on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Make sure we don't syntax check when a file is open as doing so might lead
" to vulnerabilities or performance issues.
let g:syntastic_check_on_open = 0
" Always stick detected errors into the location list.
let g:syntastic_always_populate_loc_list=1
" Automatically open when errors are detected and close when there are none.
let g:syntastic_auto_loc_list=1
" Default only to 5 lines instead of 10 (better when in the terminal)
let g:syntastic_loc_list_height = 5

nnoremap cc :TComment<CR> 
vnoremap cc :TCommentBlock<CR> 

" fugitive always opens 3 buffers, left identified by //2 and right identified
" by //3
nmap <leader>dgl :diffget //2 \| :diffupdate<CR>
nmap <leader>dgr :diffget //3 \| :diffupdate<CR>

" Sessions 
set ssop=buffers,curdir,folds,tabpages,winsize
set ssop-=options    " do not store global and local values in a session

nnoremap gn :<C-u>Unite session/new -start-insert -buffer-name=session<CR>
nnoremap go :<C-u>Unite session -start-insert -buffer-name=session<CR>
let g:unite_source_session_options="buffers,curdir,folds,tabpages,winsize"
let g:unite_source_session_enable_auto_save = 1
"}}}

" Neocomplete plugin "{{{

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <expr><CR> neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" <CR>: close popup
" <s-CR>: close popup and save indent.
inoremap <expr><s-CR> pumvisible() ? neocomplete#close_popup()"\<CR>" : "\<CR>"
" inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "\<CR>"

"}}}

" Neosnippet plugin "{{{

" deactivate neosnippet
let g:neosnippet#disable_runtime_snippets = { 'c' : 1, 'cpp' : 1, }

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

"}}}

" Unite plugin "{{{
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
" nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
" nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>

nnoremap <leader>t :<C-u>Unite -no-split -start-insert -buffer-name=files file_rec/async:!<cr>
nnoremap <leader>f :<C-u>Unite -no-split -start-insert -buffer-name=files file<cr>
nnoremap <leader>b :<C-u>Unite -no-split -start-insert -buffer-name=buffers buffer -quick-match<CR>
nnoremap <leader>e :<C-u>Unite -no-split -start-insert -buffer-name=buffer  buffer<cr>

nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>

let g:unite_source_grep_command='ag'
let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
let g:unite_source_grep_recursive_opt=''

" nnoremap <leader>/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <leader>/ :<C-u>Unite -buffer-name=search grep:.<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <buffer> jk <C-g> 
endfunction

"}}}

 " vim: set foldenable foldmethod=marker foldlevel=0:
