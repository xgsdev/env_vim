 1 important
 2 moving around, searching and patterns
 3 tags
 4 displaying text
 5 syntax, highlighting and spelling
 6 multiple windows
 7 multiple tab pages
 8 terminal
 9 using the mouse
10 printing
11 messages and info
12 selecting text
13 editing text
14 tabs and indenting
15 folding
16 diff mode
17 mapping
18 reading and writing files
19 the swap file
20 command line editing
21 executing external commands
22 running make and jumping to errors
23 language specific
24 multi-byte characters
25 various


12 selecting text

selection	"old", "inclusive" or "exclusive"; how selecting text behaves
 	set sel=inclusive
selectmode	"mouse", "key" and/or "cmd"; when to start Select mode
	instead of Visual mode
 	set slm=
keymodel	"startsel" and/or "stopsel"; what special keys can do
 	set km=

13 editing text

undolevels	maximum number of changes that can be undone
 	set ul=1000
undoreload	maximum number lines to save for undo on a buffer reload
 	set ur=10000
modified	changes have been made and not written to a file
	(local to buffer)
 	set nomod	mod
readonly	buffer is not to be written
	(local to buffer)
 	set noro	ro
modifiable	changes to the text are not possible
	(local to buffer)
 	set ma	noma
textwidth	line length above which to break a line
	(local to buffer)
 	set tw=500
wrapmargin	margin from the right in which to break a line
	(local to buffer)
 	set wm=0
backspace	specifies what <BS>, CTRL-W, etc. can do in Insert mode
 	set bs=eol,start,indent
comments	definition of what comment lines look like
	(local to buffer)
 	set com=b:#,:%,n:>
formatoptions	list of flags that tell how automatic formatting works
	(local to buffer)
 	set fo=tq
formatlistpat	pattern to recognize a numbered list
	(local to buffer)
 	set flp=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
formatexpr	expression used for "gq" to format lines
	(local to buffer)
 	set fex=
complete	specifies how Insert mode completion works for CTRL-N and CTRL-P
	(local to buffer)
 	set cpt=.,w,b,u,t,i
completeopt	whether to use a popup menu for Insert mode completion
 	set cot=longest,menuone
pumheight	maximum height of the popup menu
 	set ph=0
completefunc	user defined function for Insert mode completion
	(local to buffer)
 	set cfu=
omnifunc	function for filetype-specific Insert mode completion
	(local to buffer)
 	set ofu=syntaxcomplete#Complete
dictionary	list of dictionary files for keyword completion
	(global or local to buffer)
 	set dict=
thesaurus	list of thesaurus files for keyword completion
	(global or local to buffer)
 	set tsr=
infercase	adjust case of a keyword completion match
	(local to buffer)
 	set noinf	inf
digraph	enable entering digraps with c1 <BS> c2
 	set nodg	dg
tildeop	the "~" command behaves like an operator
 	set notop	top
operatorfunc	function called for the"g@"  operator
 	set opfunc=
showmatch	when inserting a bracket, briefly jump to its match
 	set sm	nosm
matchtime	tenth of a second to show a match for 'showmatch'
 	set mat=2
matchpairs	list of pairs that match for the "%" command
	(local to buffer)
 	set mps=(:),{:},[:]
joinspaces	use two spaces after '.' when joining a line
 	set js	nojs
nrformats	"alpha", "octal" and/or "hex"; number formats recognized for
	CTRL-A and CTRL-X commands
	(local to buffer)
 	set nf=octal,hex

14 tabs and indenting

tabstop	number of spaces a <Tab> in the text stands for
	(local to buffer)
 	set ts=4
shiftwidth	number of spaces used for each step of (auto)indent
	(local to buffer)
 	set sw=4
smarttab	a <Tab> in an indent inserts 'shiftwidth' spaces
 	set sta	nosta
softtabstop	if non-zero, number of spaces to insert for a <Tab>
	(local to buffer)
 	set sts=4
shiftround	round to 'shiftwidth' for "<<" and ">>"
 	set sr	nosr
expandtab	expand <Tab> to spaces in Insert mode
	(local to buffer)
 	set et	noet
autoindent	automatically set the indent of a new line
	(local to buffer)
 	set ai	noai
smartindent	do clever autoindenting
	(local to buffer)
 	set si	nosi
cindent	enable specific indenting for C code
	(local to buffer)
 	set nocin	cin
cinoptions	options for C-indenting
	(local to buffer)
 	set cino=
cinkeys	keys that trigger C-indenting in Insert mode
	(local to buffer)
 	set cink=0{,0},0),:,0#,!^F,o,O,e
cinwords	list of words that cause more C-indent
	(local to buffer)
 	set cinw=if,else,while,do,for,switch
indentexpr	expression used to obtain the indent of a line
	(local to buffer)
 	set inde=
indentkeys	keys that trigger indenting with 'indentexpr' in Insert mode
	(local to buffer)
 	set indk=0{,0},:,0#,!^F,o,O,e
copyindent	copy whitespace for indenting from previous line
	(local to buffer)
 	set ci	noci
preserveindent	preserve kind of whitespace when changing indent
	(local to buffer)
 	set nopi	pi
lisp	enable lisp mode
	(local to buffer)
 	set nolisp	lisp
lispwords	words that change how lisp indenting works
 	set lw=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object

15 folding

foldenable	set to display all folds open
	(local to window)
 	set nofen	fen
foldlevel	folds with a level higher than this number will be closed
	(local to window)
 	set fdl=99
foldlevelstart	value for 'foldlevel' when starting to edit a file
 	set fdls=99
foldcolumn	width of the column used to indicate folds
	(local to window)
 	set fdc=0
foldtext	expression used to display the text of a closed fold
	(local to window)
 	set fdt=foldtext()
foldclose	set to "all" to close a fold when the cursor leaves it
 	set fcl=
foldopen	specifies for which commands a fold will be opened
 	set fdo=block,hor,mark,percent,quickfix,search,tag,undo
foldminlines	minimum number of screen lines for a fold to be closed
	(local to window)
 	set fml=1
commentstring	template for comments; used to put the marker in
 	set cms=/*%s*/
foldmethod	folding type: "manual", "indent", "expr", "marker" or "syntax"
	(local to window)
 	set fdm=indent
foldexpr	expression used when 'foldmethod' is "expr"
	(local to window)
 	set fde=0
foldignore	used to ignore lines when 'foldmethod' is "indent"
	(local to window)
 	set fdi=#
foldmarker	markers used when 'foldmethod' is "marker"
	(local to window)
 	set fmr={{{,}}}
foldnestmax	maximum fold depth for when 'foldmethod is "indent" or "syntax"
	(local to window)
 	set fdn=20

16 diff mode

diff	use diff mode for the current window
	(local to window)
 	set nodiff	diff
diffopt	options for using diff mode
 	set dip=filler
diffexpr	expression used to obtain a diff file
 	set dex=
patchexpr	expression used to patch a file
 	set pex=

17 mapping

maxmapdepth	maximum depth of mapping
 	set mmd=1000
remap	recognize mappings in mapped keys
 	set remap	noremap
timeout	allow timing out halfway into a mapping
 	set to	noto
ttimeout	allow timing out halfway into a key code
 	set nottimeout	ttimeout
timeoutlen	time in msec for 'timeout'
 	set tm=200
ttimeoutlen	time in msec for 'ttimeout'
 	set ttm=1

18 reading and writing files

modeline	enable using settings from modelines when reading a file
	(local to buffer)
 	set ml	noml
modelines	number of lines to check for modelines
 	set mls=1
binary	binary file editing
	(local to buffer)
 	set nobin	bin
endofline	last line in the file has an end-of-line
	(local to buffer)
 	set eol	noeol
bomb	prepend a Byte Order Mark to the file
	(local to buffer)
 	set nobomb	bomb
fileformat	end-of-line format: "dos", "unix" or "mac"
	(local to buffer)
 	set ff=unix
fileformats	list of file formats to look for when editing a file
 	set ffs=unix,dos,mac
textmode	obsolete, use 'fileformat'
	(local to buffer)
 	set notx	tx
textauto	obsolete, use 'fileformats'
 	set ta	nota
write	writing files is allowed
 	set write	nowrite
writebackup	write a backup file before overwriting a file
 	set nowb	wb
backup	keep a backup after overwriting a file
 	set nobk	bk
backupskip	patterns that specify for which files a backup is not made
 	set bsk=/tmp/*
backupcopy	whether to make the backup as a copy or rename the existing file
 	set bkc=auto
backupdir	list of directories to put backup files in
 	set bdir=.,/home/ubuntu/tmp,/home/ubuntu/
backupext	file name extension for the backup file
 	set bex=~
autowrite	automatically write a file when leaving a modified buffer
 	set noaw	aw
autowriteall	as 'autowrite', but works with more commands
 	set noawa	awa
writeany	always write without asking for confirmation
 	set nowa	wa
autoread	automatically read a file when it was modified outside of Vim
	(global or local to buffer)
 	set ar	noar
patchmode	keep oldest version of a file; specifies file name extension
 	set pm=
fsync	forcibly sync the file to disk after writing it
 	set fs	nofs
shortname	use 8.3 file names
	(local to buffer)
 	set nosn	sn
cryptmethod	encryption method for file writing: zip or blowfish
	(local to buffer)
 	set cm=zip

19 the swap file

directory	list of directories for the swap file
 	set dir=.,/home/ubuntu/tmp,/var/tmp,/tmp
swapfile	use a swap file for this buffer
	(local to buffer)
 	set noswf	swf
swapsync	"sync", "fsync" or empty; how to flush a swap file to disk
 	set sws=fsync
updatecount	number of characters typed to cause a swap file update
 	set uc=200
updatetime	time in msec after which the swap file will be updated
 	set ut=1
maxmem	maximum amount of memory in Kbyte used for one buffer
 	set mm=508922
maxmemtot	maximum amount of memory in Kbyte used for all buffers
 	set mmt=508922

20 command line editing

history	how many command lines are remembered 
 	set hi=20
wildchar	key that triggers command-line expansion
 	set wc=9
wildcharm	like 'wildchar' but can also be used in a mapping
 	set wcm=0
wildmode	specifies how command line completion works
 	set wim=list:longest,full
suffixes	list of file name extensions that have a lower priority
 	set su=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
suffixesadd	list of file name extensions added when searching for a file
	(local to buffer)
 	set sua=
wildignore	list of patterns to ignore files for file name completion
 	set wig=*.o,*.obj,*~,*vim/backups*,*sass-cache*,*DS_Store*,vendor/rails/**,vendor/cache/**,*.gem,log/**,tmp/**,*.png,*.jpg,*.gif,*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**,*/.nx/**,*.app
fileignorecase	ignore case when using file names
 	set nofic	fic
wildignorecase	ignore case when completing file names
 	set nowic	wic
wildmenu	command-line completion shows a list of matches
 	set wmnu	nowmnu
cedit	key used to open the command-line window
 	set cedit=
cmdwinheight	height of the command-line window
 	set cwh=7
undofile	automatically save and restore undo history
 	set noudf	udf
undodir	list of directories for undo files
 	set udir=.

21 executing external commands

shell	name of the shell program used for external commands
 	set sh=/bin/bash
shellquote	character(s) to enclose a shell command in
 	set shq=
shellxquote	like 'shellquote' but include the redirection
 	set sxq=
shellxescape	characters to escape when 'shellxquote' is (
 	set sxe=
shellcmdflag	argument for 'shell' to execute a command
 	set shcf=-c
shellredir	used to redirect command output to a file
 	set srr=>%s\ 2>&1
shelltemp	use a temp file for shell commands instead of using a pipe
 	set stmp	nostmp
equalprg	program used for "=" command
	(global or local to buffer)
 	set ep=
formatprg	program used to format lines with "gq" command
 	set fp=
keywordprg	program used for the "K" command
 	set kp=man
warn	warn when using a shell command and a buffer has changes
 	set warn	nowarn

22 running make and jumping to errors

errorfile	name of the file that contains error messages
 	set ef=errors.err
errorformat	list of formats for error messages
	(global or local to buffer)
 	set efm=%*[^\"]\"%f\"%*\\D%l:\ %m,\"%f\"%*\\D%l:\ %m,%-G%f:%l:\ (Each\ undeclared\ identifier\ is\ reported\ only\ once,%-G%f:%l:\ for\ each\ function\ it\ appears\ in.),%-GIn\ file\ included\ from\ %f:%l:%c:,%-GIn\ file\ included\ from\ %f:%l:%c\\,,%-GIn\ file\ included\ from\ %f:%l:%c,%-GIn\ file\ included\ from\ %f:%l,%-G%*[\ ]from\ %f:%l:%c,%-G%*[\ ]from\ %f:%l:,%-G%*[\ ]from\ %f:%l\\,,%-G%*[\ ]from\ %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\,\ line\ %l%*\\D%c%*[^\ ]\ %m,%D%*\\a[%*\\d]:\ Entering\ directory\ `%f',%X%*\\a[%*\\d]:\ Leaving\ directory\ `%f',%D%*\\a:\ Entering\ directory\ `%f',%X%*\\a:\ Leaving\ directory\ `%f',%DMaking\ %*\\a\ in\ %f,%f\|%l\|\ %m
makeprg	program used for the ":make" command
	(global or local to buffer)
 	set mp=make
shellpipe	string used to put the output of ":make" in the error file
 	set sp=>
makeef	name of the errorfile for the 'makeprg' command
 	set mef=
grepprg	program used for the ":grep" command
	(global or local to buffer)
 	set gp=grep\ -n\ $*\ /dev/null
grepformat	list of formats for output of 'grepprg'
 	set gfm=%f:%l:%m,%f:%l%m,%f\ \ %l%m

23 language specific

isfname	specifies the characters in a file name
 	set isf=@,48-57,/,.,-,_,+,,,#,$,%,~,=
isident	specifies the characters in an identifier
 	set isi=@,48-57,_,192-255
iskeyword	specifies the characters in a keyword
	(local to buffer)
 	set isk=@,48-57,_,192-255
isprint	specifies printable characters
 	set isp=@,161-255
quoteescape	specifies escape characters in a string
	(local to buffer)
 	set qe=\\
rightleft	display the buffer right-to-left
	(local to window)
 	set norl	rl
rightleftcmd	when to edit the command-line right-to-left
	(local to window)
 	set rlc=search
revins	insert characters backwards
 	set nori	ri
allowrevins	allow CTRL-_ in Insert and Command-line mode to toggle 'revins'
 	set noari	ari
aleph	the ASCII code for the first letter of the Hebrew alphabet
 	set al=224
hkmap	use Hebrew keyboard mapping
 	set nohk	hk
hkmapp	use phonetic Hebrew keyboard mapping
 	set nohkp	hkp
altkeymap	use Farsi as the second language when 'revins' is set
 	set noakm	akm
fkmap	use Farsi keyboard mapping
 	set nofk	fk
arabic	prepare for editing Arabic text
	(local to window)
 	set noarab	arab
arabicshape	perform shaping of Arabic characters
 	set arshape	noarshape
termbidi	terminal will perform bidi handling
 	set notbidi	tbidi
keymap	name of a keyboard mappping
 	set kmp=
langmap	translate characters for Normal mode
 	set lmap=
iminsert	in Insert mode: 1: use :lmap; 2: use IM; 0: neither
	(local to window)
 	set imi=0
imsearch	entering a search pattern: 1: use :lmap; 2: use IM; 0: neither
	(local to window)
 	set ims=0

24 multi-byte characters

encoding	character encoding used in Vim: "latin1", "utf-8"
	"euc-jp", "big5", etc.
 	set enc=utf-8
fileencoding	character encoding for the current file
	(local to buffer)
 	set fenc=
fileencodings	automatically detected character encodings
 	set fencs=ucs-bom,utf-8,default,latin1
termencoding	character encoding used by the terminal
 	set tenc=
charconvert	expression used for character encoding conversion
 	set ccv=
delcombine	delete combining (composing) characters on their own
 	set nodeco	deco
maxcombine	maximum number of combining (composing) characters displayed
 	set mco=2
ambiwidth	width of ambiguous width characters
 	set ambw=single

25 various

virtualedit	when to use virtual editing: "block", "insert" and/or "all"
 	set ve=
eventignore	list of autocommand events which are to be ignored
 	set ei=
loadplugins	load plugin scripts when starting up
 	set lpl	nolpl
exrc	enable reading .vimrc/.exrc/.gvimrc in the current directory
 	set noex	ex
secure	safer working with script files in the current directory
 	set nosecure	secure
gdefault	use the 'g' flag for ":substitute"
 	set gd	nogd
edcompatible	'g' and 'c' flags of ":substitute" toggle
 	set noed	ed
maxfuncdepth	maximum depth of function calls
 	set mfd=100
sessionoptions	list of words that specifies what to put in a session file
 	set ssop=blank,buffers,curdir,folds,help,options,tabpages,winsize
viewoptions	list of words that specifies what to save for :mkview
 	set vop=folds,options,cursor
viewdir	directory where to store files with :mkview
 	set vdir=/home/ubuntu/.vim/view
viminfo	list that specifies what to write in the viminfo file
 	set vi='30,\"100,:20,%
bufhidden	what happens with a buffer when it's no longer in a window
	(local to buffer)
 	set bh=
buftype	"", "nofile", "nowrite" or "quickfix": type of buffer
	(local to buffer)
 	set bt=
buflisted	whether the buffer shows up in the buffer list
	(local to buffer)
 	set bl	nobl
debug	set to "msg" to see all error messages
 	set debug=
